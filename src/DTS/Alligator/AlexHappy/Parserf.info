-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from DTS/Alligator/AlexHappy/Parserf.y
-----------------------------------------------------------------------------

state 13 contains 4 shift/reduce conflicts.
state 18 contains 4 shift/reduce conflicts.
state 19 contains 4 shift/reduce conflicts.
state 20 contains 4 shift/reduce conflicts.
state 21 contains 4 shift/reduce conflicts.
state 29 contains 4 shift/reduce conflicts.
state 30 contains 4 shift/reduce conflicts.

terminal biOp is unused
terminal comma is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_expr -> formula                             (0)
	formula -> word                                    (1)
	formula -> top                                     (2)
	formula -> bot                                     (3)
	formula -> neg formula                             (4)
	formula -> lbracket formula rbracket               (5)
	formula -> formula and formula                     (6)
	formula -> formula or formula                      (7)
	formula -> formula imp formula                     (8)
	formula -> formula equiv formula                   (9)
	formula -> all rlbracket word rrbracket coron formula   (10)
	formula -> exists rrbracket word rlbracket coron formula   (11)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	neg            { TokenNeg }
	word           { TokenWord $$ }
	biOp           { TokenBiop $$ }
	and            { TokenAnd }
	or             { TokenOr }
	imp            { TokenImp }
	equiv          { TokenEquiv }
	top            { TokenTop }
	bot            { TokenBot }
	rbracket       { TokenRBracket }
	lbracket       { TokenLBracket }
	rrbracket      { TokenRRBracket }
	rlbracket      { TokenRLBracket }
	coron          { TokenCoron }
	comma          { TokenComma }
	all            { TokenAll }
	exists         { TokenExists }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_expr     rule  0
	formula         rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 3

State 1


	word           shift, and enter state 2


State 2

	formula -> word .                                   (rule 1)

	and            reduce using rule 1
	or             reduce using rule 1
	imp            reduce using rule 1
	equiv          reduce using rule 1
	rbracket       reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_expr -> formula .                            (rule 0)
	formula -> formula . and formula                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)

	and            shift, and enter state 14
	or             shift, and enter state 15
	imp            shift, and enter state 16
	equiv          shift, and enter state 17
	%eof           accept


State 4

	formula -> neg . formula                            (rule 4)

	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 13

State 5

	formula -> top .                                    (rule 2)

	and            reduce using rule 2
	or             reduce using rule 2
	imp            reduce using rule 2
	equiv          reduce using rule 2
	rbracket       reduce using rule 2
	%eof           reduce using rule 2


State 6

	formula -> bot .                                    (rule 3)

	and            reduce using rule 3
	or             reduce using rule 3
	imp            reduce using rule 3
	equiv          reduce using rule 3
	rbracket       reduce using rule 3
	%eof           reduce using rule 3


State 7

	formula -> lbracket . formula rbracket              (rule 5)

	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 12

State 8

	formula -> all . rlbracket word rrbracket coron formula    (rule 10)

	rlbracket      shift, and enter state 11


State 9

	formula -> exists . rrbracket word rlbracket coron formula    (rule 11)

	rrbracket      shift, and enter state 10


State 10

	formula -> exists rrbracket . word rlbracket coron formula    (rule 11)

	word           shift, and enter state 24


State 11

	formula -> all rlbracket . word rrbracket coron formula    (rule 10)

	word           shift, and enter state 23


State 12

	formula -> lbracket formula . rbracket              (rule 5)
	formula -> formula . and formula                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)

	and            shift, and enter state 14
	or             shift, and enter state 15
	imp            shift, and enter state 16
	equiv          shift, and enter state 17
	rbracket       shift, and enter state 22


State 13

	formula -> neg formula .                            (rule 4)
	formula -> formula . and formula                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)

	and            shift, and enter state 14
			(reduce using rule 4)

	or             shift, and enter state 15
			(reduce using rule 4)

	imp            shift, and enter state 16
			(reduce using rule 4)

	equiv          shift, and enter state 17
			(reduce using rule 4)

	rbracket       reduce using rule 4
	%eof           reduce using rule 4


State 14

	formula -> formula and . formula                    (rule 6)

	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 21

State 15

	formula -> formula or . formula                     (rule 7)

	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 20

State 16

	formula -> formula imp . formula                    (rule 8)

	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 19

State 17

	formula -> formula equiv . formula                  (rule 9)

	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 18

State 18

	formula -> formula . and formula                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)
	formula -> formula equiv formula .                  (rule 9)

	and            shift, and enter state 14
			(reduce using rule 9)

	or             shift, and enter state 15
			(reduce using rule 9)

	imp            shift, and enter state 16
			(reduce using rule 9)

	equiv          shift, and enter state 17
			(reduce using rule 9)

	rbracket       reduce using rule 9
	%eof           reduce using rule 9


State 19

	formula -> formula . and formula                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula imp formula .                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)

	and            shift, and enter state 14
			(reduce using rule 8)

	or             shift, and enter state 15
			(reduce using rule 8)

	imp            shift, and enter state 16
			(reduce using rule 8)

	equiv          shift, and enter state 17
			(reduce using rule 8)

	rbracket       reduce using rule 8
	%eof           reduce using rule 8


State 20

	formula -> formula . and formula                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula or formula .                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)

	and            shift, and enter state 14
			(reduce using rule 7)

	or             shift, and enter state 15
			(reduce using rule 7)

	imp            shift, and enter state 16
			(reduce using rule 7)

	equiv          shift, and enter state 17
			(reduce using rule 7)

	rbracket       reduce using rule 7
	%eof           reduce using rule 7


State 21

	formula -> formula . and formula                    (rule 6)
	formula -> formula and formula .                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)

	and            shift, and enter state 14
			(reduce using rule 6)

	or             shift, and enter state 15
			(reduce using rule 6)

	imp            shift, and enter state 16
			(reduce using rule 6)

	equiv          shift, and enter state 17
			(reduce using rule 6)

	rbracket       reduce using rule 6
	%eof           reduce using rule 6


State 22

	formula -> lbracket formula rbracket .              (rule 5)

	and            reduce using rule 5
	or             reduce using rule 5
	imp            reduce using rule 5
	equiv          reduce using rule 5
	rbracket       reduce using rule 5
	%eof           reduce using rule 5


State 23

	formula -> all rlbracket word . rrbracket coron formula    (rule 10)

	rrbracket      shift, and enter state 26


State 24

	formula -> exists rrbracket word . rlbracket coron formula    (rule 11)

	rlbracket      shift, and enter state 25


State 25

	formula -> exists rrbracket word rlbracket . coron formula    (rule 11)

	coron          shift, and enter state 28


State 26

	formula -> all rlbracket word rrbracket . coron formula    (rule 10)

	coron          shift, and enter state 27


State 27

	formula -> all rlbracket word rrbracket coron . formula    (rule 10)

	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 30

State 28

	formula -> exists rrbracket word rlbracket coron . formula    (rule 11)

	neg            shift, and enter state 4
	word           shift, and enter state 2
	top            shift, and enter state 5
	bot            shift, and enter state 6
	lbracket       shift, and enter state 7
	all            shift, and enter state 8
	exists         shift, and enter state 9

	formula        goto state 29

State 29

	formula -> formula . and formula                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)
	formula -> exists rrbracket word rlbracket coron formula .    (rule 11)

	and            shift, and enter state 14
			(reduce using rule 11)

	or             shift, and enter state 15
			(reduce using rule 11)

	imp            shift, and enter state 16
			(reduce using rule 11)

	equiv          shift, and enter state 17
			(reduce using rule 11)

	rbracket       reduce using rule 11
	%eof           reduce using rule 11


State 30

	formula -> formula . and formula                    (rule 6)
	formula -> formula . or formula                     (rule 7)
	formula -> formula . imp formula                    (rule 8)
	formula -> formula . equiv formula                  (rule 9)
	formula -> all rlbracket word rrbracket coron formula .    (rule 10)

	and            shift, and enter state 14
			(reduce using rule 10)

	or             shift, and enter state 15
			(reduce using rule 10)

	imp            shift, and enter state 16
			(reduce using rule 10)

	equiv          shift, and enter state 17
			(reduce using rule 10)

	rbracket       reduce using rule 10
	%eof           reduce using rule 10


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 12
Number of terminals: 17
Number of non-terminals: 2
Number of states: 31
